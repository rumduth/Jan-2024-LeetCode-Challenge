1143. Longest Common Subsequence

Given two strings text1 and text2, return the length of their longest common subsequence. If there is no common subsequence, return 0.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

For example, "ace" is a subsequence of "abcde".
A common subsequence of two strings is a subsequence that is common to both strings.


//C++
//Iterative
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> dp(m+1,vector<int>(n+1,0));
        for(int i = 1; i <= m; i++)
        {
            for(int j = 1; j <= n; j++)
            {
                if(text1[i-1] == text2[j-1])
                    dp[i][j] = 1 + dp[i-1][j-1];
                else
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1]);
            }
        }
        return dp[m][n];
    }
};

Time Complexity: O(M*N)
Space Complexity: O(M*N)

//Recursive
class Solution {
public:
    int longestCommonSubsequence(string text1, string text2) {
        int m = text1.size();
        int n = text2.size();
        vector<vector<int>> memo(m,vector<int>(n,-1));
        return helper(memo, text1, text2, m-1, n-1);
    }
    int helper(vector<vector<int>>& memo, string& text1, string& text2, int i, int j)
    {
        if(i < 0 || j < 0)
            return 0;
        if(memo[i][j] != -1)
            return memo[i][j];
        if(text1[i] == text2[j])
            memo[i][j] = 1 + helper(memo,text1,text2,i-1,j-1);
        else
            memo[i][j] = max(helper(memo,text1,text2,i-1,j), helper(memo,text1,text2,i,j-1));
        return memo[i][j];
    }
};





//Python3
//Iterative
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m = len(text1)
        n = len(text2)
        dp = [[0] * (n+1) for _ in range(m+1)]
        for i in range(1,m+1):
            for j in range(1,n+1):
                if text1[i-1] == text2[j-1]:
                    dp[i][j] = 1 + dp[i-1][j-1]
                else:
                    dp[i][j] = max(dp[i-1][j],dp[i][j-1])
        return dp[m][n]

//Recursive
class Solution:
    def longestCommonSubsequence(self, text1: str, text2: str) -> int:
        m = len(text1)
        n = len(text2)
        dp = [[-1] * n for _ in range(m)]
        def helper(i, j):
            if i < 0 or j < 0:
                return 0
            if dp[i][j] != -1:
                return dp[i][j]
            if text1[i] == text2[j]:
                dp[i][j] = 1 + helper(i-1,j-1)
            else:
                dp[i][j] = max(helper(i-1,j),helper(i,j-1))
            return dp[i][j]

        return helper(m-1,n-1)