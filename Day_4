<!-- 2870. Minimum Number of Operations to Make Array Empty
You are given a 0-indexed array nums consisting of positive integers.

There are two types of operations that you can apply on the array any number of times:

Choose two elements with equal values and delete them from the array.
Choose three elements with equal values and delete them from the array.
Return the minimum number of operations required to make the array empty, or -1 if it is not possible.
 -->

//C++ 
class Solution {
public:
    int minOperations(vector<int>& nums) {
        int count = 0;
        unordered_map<int, int> m;
        for(auto& i : nums)
            m[i]++;
        for(auto& i: m)
        {
            int k = i.second;
            bool good = false;
            for(int j = 0; j <= k/2; j++)
            {
                if ((k - 2*j) % 3 == 0)
                {
                    count += j + (k - 2*j) / 3;
                    good = true;
                    break;
                }
            }
            if(!good)
                return -1;
        }
        return count;
    }
};

//clean code but not intuitive
class Solution {
public:
    int minOperations(vector<int>& nums) {
        int count = 0;
        unordered_map<int, int> m;
        for(auto& i : nums)
            m[i]++;
        for(auto& i: m)
        {
            if(i.second == 1)
                return -1;
            if(i.second % 3 == 0)
                count += i.second / 3;
            else
                count += 1 + i.second / 3;
        }
        return count;
    }
};

//In Python3
class Solution:
    def minOperations(self, nums: List[int]) -> int:
        count = 0
        my_list = Counter(nums)
        for b in my_list.values():
            if b == 1:
                return -1
            else:
                if b % 3 == 0:
                    count += b // 3
                else:
                    count += 1 + b // 3
        return count
        