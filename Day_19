931. Minimum Falling Path Sum
Given an n x n array of integers matrix, return the minimum sum of any falling path through matrix.

A falling path starts at any element in the first row and chooses the element in the next row that is either directly below or diagonally left/right. Specifically, the next element from position (row, col) will be (row + 1, col - 1), (row + 1, col), or (row + 1, col + 1).


//C++
class Solution {
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        int n = matrix.size();
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < n; j++)
            {
                if(j == 0)
                    matrix[i][j] = matrix[i][j] + min(matrix[i-1][j], matrix[i-1][j+1]);
                else if(j == n-1)
                    matrix[i][j] = matrix[i][j] + min(matrix[i-1][j],matrix[i-1][j-1]);
                else
                    matrix[i][j] = matrix[i][j] + min(min(matrix[i-1][j+1],matrix[i-1][j-1]),matrix[i-1][j]);
            }
        }
        int ans = INT_MAX;
        for(int i = 0; i < n; i++)
            ans = min(ans,matrix[n-1][i]);
        return ans;
    }
};

Time Complexity: O(N*N)
Space Complexity: O(1)

class Solution:
    def minFallingPathSum(self, matrix: List[List[int]]) -> int:
        n = len(matrix)
        for i in range(1,n):
            for j in range(n):
                if j == 0:
                     matrix[i][j] = matrix[i][j] + min(matrix[i-1][j], matrix[i-1][j+1])
                elif j == n-1:
                    matrix[i][j] = matrix[i][j] + min(matrix[i-1][j],matrix[i-1][j-1])
                else:
                    matrix[i][j] = matrix[i][j] + min(min(matrix[i-1][j+1],matrix[i-1][j-1]),matrix[i-1][j])
        ans = float('inf')
        for i in range(n):
            ans = min(ans, matrix[n-1][i])
        return min(matrix[-1])


