<!-- 1235. Maximum Profit in Job Scheduling
We have n jobs, where every job is scheduled to be done from startTime[i] to endTime[i], obtaining a profit of profit[i].

You're given the startTime, endTime and profit arrays, return the maximum profit you can take such that there are no two jobs in the subset with overlapping time range.

If you choose a job that ends at time X you will be able to start another job that starts at time X.

Input: startTime = [1,2,3,3], endTime = [3,4,5,6], profit = [50,10,40,70]
Output: 120
Explanation: The subset chosen is the first and fourth job. 
Time range [1-3]+[3-6] , we get profit of 120 = 50 + 70. -->


//C++

//Iterative Approach
class Solution {
public:
    static bool cmp(const vector<int>& a, const vector<int>& b)
    {
        if(a[1] != b[1])
            return a[1] < b[1];
        return a[0] < b[0];
    }
    static bool cmp1(const vector<int>& a, int val)
    {
        return a[1] <= val;
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n = startTime.size();
        vector<vector<int>> time;
        for(int i = 0; i < n; i++)
            time.push_back({startTime[i],endTime[i],profit[i]});
        sort(time.begin(),time.end(),cmp);

        vector<int> dp(n);
        dp[0] = time[0][2];
        for(int i = 1; i < n; i++)
        {
            int prevJobIndex = lower_bound(time.begin(),time.begin() + i,time[i][0],cmp1) - time.begin() - 1;
            int profit;
            if(prevJobIndex >= 0)
                profit = dp[prevJobIndex] + time[i][2];
            else
                profit = time[i][2];
            dp[i] = max(profit,dp[i-1]);
        }
        return dp[n-1];
    }
};

//Recursive Approach
class Solution {
public:
    static bool cmp(const vector<int>& a, const vector<int>& b)
    {
        if(a[1] != b[1])
            return a[1] < b[1];
        return a[0] < b[0];
    }
    static bool cmp1(const vector<int>& a, int val)
    {
        return a[1] <= val;
    }
    int jobScheduling(vector<int>& startTime, vector<int>& endTime, vector<int>& profit) {
        int n = startTime.size();
        vector<vector<int>> time;
        for(int i = 0; i < n; i++)
            time.push_back({startTime[i],endTime[i],profit[i]});
        sort(time.begin(),time.end(),cmp);
        vector<int> dp(n,-1);
        return helper(dp,time,n-1);
      
    }

    int helper(vector<int>& dp, vector<vector<int>>& time, int n)
    {
        if(n == 0)
            return time[0][2];
    
        if(dp[n] != -1)
            return dp[n];
        int profit;
        
        int prevJobIndex = lower_bound(time.begin(),time.begin() + n,time[n][0],cmp1) - time.begin() - 1;
        if(prevJobIndex >= 0)
            profit = helper(dp,time,prevJobIndex) + time[n][2];
        else
            profit = time[n][2];
        profit = max(profit, helper(dp,time,n-1));
        dp[n] = profit;
        return profit;
    }
};



//In Python3
//Iterative
class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        n = len(startTime)
        jobs = list(zip(startTime,endTime,profit))
        jobs.sort(key=lambda x : x[1])
        dp = [-1] * n
        dp[0] = jobs[0][2]
        for i in range(1,n):
            prevJobIndex = bisect_right(jobs[:i], jobs[i][0], key = lambda x: x[1]) - 1
            profit = jobs[i][2]
            if prevJobIndex >= 0:
                profit += dp[prevJobIndex]
            dp[i] = max(profit,dp[i-1])
        return dp[-1]


//Recursive
class Solution:
    def jobScheduling(self, startTime: List[int], endTime: List[int], profit: List[int]) -> int:
        n = len(startTime)
        jobs = list(zip(startTime,endTime,profit))
        jobs.sort(key=lambda x : x[1])
        cache = {}
        def helper(idx):
            if idx == 0:
                return jobs[idx][2]
            if idx in cache.keys():
                return cache[idx]
            prevJobIndex = bisect_right(jobs[:idx], jobs[idx][0], key = lambda x: x[1]) - 1
            res = jobs[idx][2]
            if prevJobIndex >= 0:
                res += helper(prevJobIndex)
            cache[idx] = max(res, helper(idx-1))
            return cache[idx]
        return helper(n-1)





        