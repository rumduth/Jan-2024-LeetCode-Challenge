446. Arithmetic Slices II - Subsequence
Given an integer array nums, return the number of all the arithmetic subsequences of nums.

A sequence of numbers is called arithmetic if it consists of at least three elements and if the difference between any two consecutive elements is the same.

For example, [1, 3, 5, 7, 9], [7, 7, 7, 7], and [3, -1, -5, -9] are arithmetic sequences.
For example, [1, 1, 2, 5, 7] is not an arithmetic sequence.
A subsequence of an array is a sequence that can be formed by removing some elements (possibly none) of the array.

For example, [2,5,10] is a subsequence of [1,2,1,2,4,1,5,10].
The test cases are generated so that the answer fits in 32-bit integer.

//C++
//Iterative
class Solution {
public:
    int numberOfArithmeticSlices(vector<int>& nums) {
        int n = nums.size();
        unordered_map<int, unordered_map<long long, int>> m;
        int ans = 0;
        for(int i = 1; i < n; i++)
        {
            for(int j = 0; j < i; j++)
            {
                long long d = (long long)nums[i] - nums[j];
                if(!m[j].count(d))
                    m[i][d]++;
                else
                {
                    m[i][d] += m[j][d] + 1;
                    ans += m[j][d];
                }
            }
        }
        return ans;
    }
};

Time Complexity: O(N^2)
Space Complexity: O(N)

//Python3
class Solution:
    def numberOfArithmeticSlices(self, nums: List[int]) -> int:
        my_dictionary = [defaultdict(int) for _ in nums]
        total = 0
        for i, current_num in enumerate(nums):
            for j, prev_num in enumerate(nums[:i]):
                dif = current_num - prev_num
                total += my_dictionary[j][dif]
                my_dictionary[i][dif] += my_dictionary[j][dif] + 1
        return total