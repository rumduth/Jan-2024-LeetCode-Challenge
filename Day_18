70. Climbing Stairs
You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?



//C++
//Recursion
class Solution {
public:
    int climbStairs(int n) {
        vector<int> memo(n,-1);
        return helper(memo,n-1) + helper(memo,n-2);
    }
    int helper(vector<int>& memo, int n)
    {
        if(n < 0)
            return 0;
        if(n == 1 || n == 0)
            return 1;
        if(memo[n] != -1)
            return memo[n];
        memo[n] = helper(memo,n-1) + helper(memo,n-2);
        return memo[n];
    }
};
//Iterative

class Solution {
public:
    int climbStairs(int n) {
        if(n == 1)
            return 1;
        if(n == 2)
            return 2;
  
        vector<int> dp(n+1);
        dp[1] = 1;
        dp[2] = 2;
        for(int i = 3; i <= n; i++)
            dp[i] = dp[i-1] + dp[i-2];
        return dp[n];
    }
};

Time Complexity: O(N)
Space Complexity: O(N)


//Python3

//Iterative
class Solution:
    def climbStairs(self, n: int) -> int:
        if n == 1:
            return 1
        if n == 2:
            return 2
        dp = [0] * (n+1)
        dp[1] = 1
        dp[2] = 2
        for i in range(3,n+1):
            dp[i] = dp[i-1] + dp[i-2]
        return dp[n]


//Recursion
class Solution:
    def climbStairs(self, n: int) -> int:
        cache = {}
        def helper(n):
            if n < 0:
                return 0
            if n == 0 or n == 1:
                return 1
            if n in cache:
                return cache[n]
            cache[n] = helper(n-1) + helper(n-2)
            return cache[n]

        return helper(n)
            