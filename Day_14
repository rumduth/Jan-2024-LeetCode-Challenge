1657. Determine if Two Strings Are Close
Two strings are considered close if you can attain one from the other using the following operations:

Operation 1: Swap any two existing characters.
For example, abcde -> aecdb
Operation 2: Transform every occurrence of one existing character into another existing character, and do the same with the other character.
For example, aacabb -> bbcbaa (all a's turn into b's, and all b's turn into a's)
You can use the operations on either string as many times as necessary.

Given two strings, word1 and word2, return true if word1 and word2 are close, and false otherwise.

//C++
class Solution {
public:
    bool closeStrings(string word1, string word2) {
        if(word1.size() != word2.size())
            return false;
        unordered_map<char, int> m1, m2;
        unordered_map<int, int> cnt1, cnt2;
        
        int n = word1.size();
        for(int i = 0; i < n; i++)
        {
            m1[word1[i]]++;
            m2[word2[i]]++;
        }
        for(int i = 0; i < word2.size(); i++)
            if(!m1.count(word2[i]))
                return false;
        
        for(auto &i: m1)
            cnt1[i.second]++;
        for(auto &i: m2)
            cnt2[i.second]++;
        for(auto& i : cnt1)
            if(i.second != cnt2[i.first])
                return false;

        return true;
    }
};
Time Complexity: O(N)
Space Complexity: O(N)
//Python3
class Solution:
    def closeStrings(self, word1: str, word2: str) -> bool:
        dict_1 = Counter(word1)
        dict_2 = Counter(word2)
        for key in dict_2.keys():
            if key not in dict_1.keys():
                return False
        
        cnt_1 = defaultdict(int)
        cnt_2 = defaultdict(int)
        for value in dict_1.values():
            cnt_1[value] += 1
        for value in dict_2.values():
            cnt_2[value] += 1
        return cnt_1 == cnt_2
        