1239. Maximum Length of a Concatenated String with Unique Characters
You are given an array of strings arr. A string s is formed by the concatenation of a subsequence of arr that has unique characters.

Return the maximum possible length of s.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

//C++
class Solution {
public:
    void backtracking(vector<string>& arr, unordered_map<char, bool> m, int idx, int curLength, int& ans)
    {
        if(idx == arr.size())
        {
            ans = max(ans,curLength);
            return;
        }
        //Not including
        backtracking(arr,m,idx+1,curLength, ans);
        //Including
        for(int i = 0; i < arr[idx].size(); i++)
        {
            if(m[arr[idx][i]] == false)
                m[arr[idx][i]] = true;
            else
                return;
        }
        curLength += arr[idx].size();
        backtracking(arr,m,idx+1,curLength,ans);
        for(int i = 0; i < arr[idx].size(); i++)
            m[arr[idx][i]] = false;
        curLength -= arr[idx].size();

    }
    int maxLength(vector<string>& arr) {
        int ans = 0;
        unordered_map<char, bool> m;
        backtracking(arr,m,0,0,ans);
        return ans;
    }
};

Time Complexity: O(2^N * M)
Space Complexity: O(N)

class Solution:
    def maxLength(self, arr: List[str]) -> int:
        def backtrack(index, bitmask):
            if index == len(arr):
                return 0
            #Skipping the current string:
            length = backtrack(index+1, bitmask)

            #including the currenst string if it has unique character
            for char in arr[index]:
                if bitmask & (1 << (ord(char) - ord('a'))):
                    return length
                bitmask |= (1 << (ord(char) - ord('a')))
            
            length = max(length, len(arr[index]) + backtrack(index+1,bitmask))
            return length
        return backtrack(0,0)