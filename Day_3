<!-- 2125. Number of Laser Beams in a Bank
Anti-theft security devices are activated inside a bank. You are given a 0-indexed binary string array bank representing the floor plan of the bank, which is an m x n 2D matrix. bank[i] represents the ith row, consisting of '0's and '1's. '0' means the cell is empty, while'1' means the cell has a security device.

There is one laser beam between any two security devices if both conditions are met:

The two devices are located on two different rows: r1 and r2, where r1 < r2.
For each row i where r1 < i < r2, there are no security devices in the ith row.
Laser beams are independent, i.e., one beam does not interfere nor join with another.

Return the total number of laser beams in the bank. -->

//In C++
class Solution {
public:
    int numberOfBeams(vector<string>& bank) {
        int a = 0;
        int b = 0;
        int ans = 0;
        for(int i = 0; i < bank.size(); i++)
        {
            int security_devices = 0;
            for(int j = 0; j < bank[i].size(); j++)
                if(bank[i][j] == '1') security_devices++;
            if(security_devices == 0)
                continue;
            if(a == 0)
                a = security_devices;
            else
            {
                b = security_devices;
                ans += a*b;
                a = b;
            }
        }
        return ans;
    }
};

Time Complexity: O(N*L)
Space Complexity: O(1)

//In Python3
class Solution:
    def numberOfBeams(self, bank: List[str]) -> int:
        a = 0
        b = 0
        count = 0
        for row in bank:
            sec_devices = 0
            for col in row:
                if col == "1":
                    sec_devices+=1
            if sec_devices == 0:
                continue
            if a == 0:
                a = sec_devices
            else:
                b = sec_devices
                count += a*b
                a = b
        return count
        