938. Range Sum of BST
Given the root node of a binary search tree and two integers low and high, return the sum of values of all nodes with a value in the inclusive range [low, high].

//C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int rangeSumBST(TreeNode* root, int low, int high) {
        if(root == NULL)
            return 0;
        if(root->val >= low && root->val <= high)
            return root->val + rangeSumBST(root->left,low,high) + rangeSumBST(root->right,low,high);
        else
            return rangeSumBST(root->left,low,high) + rangeSumBST(root->right,low,high);
    }
};

Time Complexity: O(N)
Space Complexity: O(1)

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def rangeSumBST(self, root: Optional[TreeNode], low: int, high: int) -> int:
        def dfs(node):
            nonlocal total
            if node is None:
                return
            if node.val >= low and node.val <= high:
                total += node.val
            dfs(node.left)
            dfs(node.right)
        total = 0
        dfs(root)
        return total