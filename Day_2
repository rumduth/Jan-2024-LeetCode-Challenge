// 2610. Convert an Array Into a 2D Array With Conditions
// You are given an integer array nums. You need to create a 2D array from nums satisfying the following conditions:

// The 2D array should contain only the elements of the array nums.
// Each row in the 2D array contains distinct integers.
// The number of rows in the 2D array should be minimal.
// Return the resulting array. If there are multiple answers, return any of them.

// Note that the 2D array can have a different number of elements on each row.

// Example 1:

// Input: nums = [1,3,4,1,2,3,1]
// Output: [[1,3,4,2],[1,3],[1]]
// Explanation: We can create a 2D array that contains the following rows:
// - 1,3,4,2
// - 1,3
// - 1
// All elements of nums were used, and each row of the 2D array contains distinct integers, so it is a valid answer.
// It can be shown that we cannot have less than 3 rows in a valid array.
// Example 2:

// Input: nums = [1,2,3,4]
// Output: [[4,3,2,1]]
// Explanation: All elements of the array are distinct, so we can keep all of them in the first row of the 2D array.

// In C++
class Solution {
public:
    vector<vector<int>> findMatrix(vector<int>& nums) {
        unordered_map<int, int> m;
        int row = 0;
        for(int i = 0; i < nums.size(); i++)
        {
            m[nums[i]]++;
            row = max(row,m[nums[i]]);
        }
        vector<vector<int>> ans(row);
        for(auto& i : m)
            for(int j = 0; j < row; j++)
                if(i.second > 0)
                {
                    ans[j].push_back(i.first);
                    i.second--;
                }
        return ans;

    }
};

Time Complexity: O(row*N)
Space Complexity: O(N)

// in Python3
class Solution:
    def findMatrix(self, nums: List[int]) -> List[List[int]]:
        my_dict = Counter(nums)
        row = 0
        for a,b in my_dict.items():
            row = max(row,b)
        
        my_list = [[] for x in range(row)]
        for key in my_dict.keys():
            for i in range(row):
                if my_dict[key] > 0:
                    my_list[i].append(key)
                    my_dict[key] -= 1
                else:
                    continue
       
        return my_list
        
    
        